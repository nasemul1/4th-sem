problem-1:
Consider the following schemas for "bank" database relations, where the primary keys are underlined.

branch (branch-name, branch_city, assets)
customer (customer-name, customer_street, customer_city)
loan (loan-number, branch_name, amount)
borrower (customer-name, loan-number)
account (account-number, branch_name, balance)
depositor (customer-name, account-number)


Schema::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    Data-Definition Language (DDL)

    CREATE DATABASE IF NOT EXISTS bank;
    USE bank;

    CREATE TABLE branch (
    branch_name VARCHAR(100),
    branch_city VARCHAR(100),
    assets DECIMAL(10,2),
    PRIMARY KEY (branch_name)
    );

    CREATE TABLE customer (
    customer_name VARCHAR(100),
    customer_street VARCHAR(255),
    customer_city VARCHAR(255),
    PRIMARY KEY (customer_name)
    );

    CREATE TABLE loan (
    loan_number VARCHAR(100),
    branch_name VARCHAR(100),
    amount DECIMAL(10,2),
    PRIMARY KEY (loan_number),
    FOREIGN KEY (branch_name) REFERENCES branch (branch_name)
    );

    CREATE TABLE borrower (
    customer_name VARCHAR(100),
    loan_number VARCHAR(100),
    PRIMARY KEY (customer_name, loan_number),
    FOREIGN KEY (customer_name) REFERENCES customer (customer_name),
    FOREIGN KEY (loan_number) REFERENCES loan (loan_number)
    );

    CREATE TABLE account (
    account_number VARCHAR(100),
    branch_name VARCHAR(100),
    balance DECIMAL(10,2),
    PRIMARY KEY (account_number),
    FOREIGN KEY (branch_name) REFERENCES branch (branch_name)
    );

    CREATE TABLE depositor (
    customer_name VARCHAR(100),
    account_number VARCHAR(100),
    PRIMARY KEY (customer_name, account_number),
    FOREIGN KEY (customer_name) REFERENCES customer (customer_name),
    FOREIGN KEY (account_number) REFERENCES account (account_number)
    );

Data-Manipulation Language (DML):::::::::::::::::::::::::::::::::::::::::::::::::::::

    INSERT INTO branch (branch_name, branch_city, assets)
    VALUES ('Perryridge', 'CityA', 500000),
        ('Dhanmondi', 'CityB', 300000);

    INSERT INTO customer (customer_name, customer_street, customer_city)
    VALUES ('John Doe', '123 Main Street', 'New York'),
        ('Jane Smith', '456 Elm Street', 'Los Angeles'),
        ('Mike Johnson', '789 Oak Street', 'Chicago');

    INSERT INTO loan (loan_number, branch_name, amount)
    VALUES ('LN-001', 'Perryridge', 5000),
        ('LN-002', 'Perryridge', 10000),
        ('LN-003', 'Dhanmondi', 7500);

    INSERT INTO account (account_number, branch_name, balance)
    VALUES ('AC-001', 'Perryridge', 10000),
        ('AC-002', 'Perryridge', 20000),
        ('AC-003', 'Dhanmondi', 15000);

    INSERT INTO borrower (customer_name, loan_number)
    VALUES ('John Doe', 'LN-001'),
        ('Jane Smith', 'LN-002'),
        ('Mike Johnson', 'LN-003');

    INSERT INTO depositor (customer_name, account_number)
    VALUES ('John Doe', 'AC-001'),
        ('Jane Smith', 'AC-002'),
        ('Mike Johnson', 'AC-003');

1.Find the names of customers who have an account but no loan.
Query:
    SELECT DISTINCT d.customer_name
    FROM Depositor d
    WHERE d.customer_name NOT IN (
        SELECT b.customer_name
        FROM Borrower b
    );

2. Delete all loan amount between 10000/- and 25000/-
Query:
    DELETE FROM borrower
    WHERE loan_number IN (SELECT loan_number FROM loan WHERE amount BETWEEN 10000 AND 25000);

    DELETE FROM loan
    WHERE amount BETWEEN 10000 AND 25000;

3. Find the names of all customers who have a loan at Perryridge branch.
Query:
    SELECT DISTINCT c.customer_name
    FROM customer c
    JOIN borrower b ON c.customer_name = b.customer_name
    JOIN loan l ON b.loan_number = l.loan_number
    WHERE l.branch_name = 'Perryridge';

Problem - 3:

1.Find all customers of the bank who have both loan and a saving account.
Query:
    SELECT DISTINCT b.customer-name
    FROM Borrower b
    JOIN Depositor d ON b.customer-name = d.customer-name;

2. Find all average account balance at each branch.
Query:
    SELECT branch-name, AVG(balance) AS average_balance
    FROM Saving-account
    GROUP BY branch-name;

3.
    UPDATE Account a
    SET balance =
        CASE
            WHEN EXISTS (SELECT 1 FROM Borrower b JOIN Depositor d ON b.customer_name = d.customer_name WHERE d.account_number = a.account_number)
                THEN balance * 0.97
            ELSE balance * 0.95
        END;

Problem - 2:

1. Find the company that has the most employees.
query:
    SELECT company_name
    FROM Works
    GROUP BY company_name
    ORDER BY COUNT(employee_id) DESC
    LIMIT 1;

2. Find the average salaries at each company.
query:
    SELECT company_name, AVG(salary) AS average_salary
    FROM Works
    GROUP BY company_name;

3. Find all employees who live in Barisal city, but their company is not in Barisal.
query:
    SELECT e.employee_name
    FROM Employee e
    JOIN Works w ON e.employee_id = w.employee_id
    JOIN Company c ON w.company_name = c.company_name
    WHERE e.city = 'Barisal' AND c.city <> 'Barisal';

4. Find the names of all employees who work for First Bank Corporation.
query:
    SELECT e.employee_name
    FROM Employee e
    JOIN Works w ON e.employee_id = w.employee_id
    WHERE w.company_name = 'First Bank Corporation';
